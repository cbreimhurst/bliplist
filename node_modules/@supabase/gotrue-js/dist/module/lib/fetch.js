var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fetch from 'cross-fetch';
const handleError = (error, reject) => {
    if (typeof error.json === 'function') {
        error.json().then((msg) => {
            let errorMessage = msg.msg || msg.message || msg.error_description || msg.error || JSON.stringify(msg);
            return reject(new Error(errorMessage));
        });
    }
    else {
        return reject(error);
    }
};
export function get(url, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fetch(url, {
                method: 'GET',
                headers: (options === null || options === void 0 ? void 0 : options.headers) || {},
            })
                .then((result) => {
                if (!result.ok)
                    throw result;
                else if (options === null || options === void 0 ? void 0 : options.noResolveJson)
                    return resolve;
                else
                    return result.json();
            })
                .then((data) => resolve(data))
                .catch((error) => handleError(error, reject));
        });
    });
}
export function post(url, body, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fetch(url, {
                method: 'POST',
                headers: Object.assign({ 'Content-Type': 'text/plain;charset=UTF-8' }, options === null || options === void 0 ? void 0 : options.headers),
                body: JSON.stringify(body),
            })
                .then((result) => {
                if (!result.ok)
                    throw result;
                else if (options === null || options === void 0 ? void 0 : options.noResolveJson)
                    return resolve;
                else
                    return result.json();
            })
                .then((data) => resolve(data))
                .catch((error) => handleError(error, reject));
        });
    });
}
export function put(url, body, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fetch(url, {
                method: 'PUT',
                headers: Object.assign({ 'Content-Type': 'text/plain;charset=UTF-8' }, options === null || options === void 0 ? void 0 : options.headers),
                body: JSON.stringify(body),
            })
                .then((result) => {
                if (!result.ok)
                    throw result;
                else if (options === null || options === void 0 ? void 0 : options.noResolveJson)
                    return resolve;
                else
                    return result.json();
            })
                .then((data) => resolve(data))
                .catch((error) => handleError(error, reject));
        });
    });
}
//# sourceMappingURL=fetch.js.map