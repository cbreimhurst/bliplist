"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fetch_1 = require("./lib/fetch");
class GoTrueApi {
    constructor({ url = '', headers = {}, }) {
        this.url = url;
        this.headers = headers;
    }
    /**
     * Creates a new user using their email address.
     * @param email The email address of the user.
     * @param password The password of the user.
     */
    signUpWithEmail(email, password) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield fetch_1.post(`${this.url}/signup`, { email, password }, { headers: this.headers });
                return { data, error: null };
            }
            catch (error) {
                return { data: null, error };
            }
        });
    }
    /**
     * Logs in an existing using their email address.
     * @param email The email address of the user.
     * @param password The password of the user.
     */
    signInWithEmail(email, password) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield fetch_1.post(`${this.url}/token?grant_type=password`, { email, password }, { headers: this.headers });
                return { data, error: null };
            }
            catch (error) {
                return { data: null, error };
            }
        });
    }
    /**
     * Sends a magic login link to an email address.
     * @param email The email address of the user.
     */
    sendMagicLinkEmail(email) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield fetch_1.post(`${this.url}/magiclink`, { email }, { headers: this.headers });
                return { data, error: null };
            }
            catch (error) {
                return { data: null, error };
            }
        });
    }
    /**
     * Sends an invite link to an email address.
     * @param email The email address of the user.
     */
    inviteUserByEmail(email) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield fetch_1.post(`${this.url}/invite`, { email }, { headers: this.headers });
                return { data, error: null };
            }
            catch (error) {
                return { data: null, error };
            }
        });
    }
    /**
     * Sends a reset request to an email address.
     * @param email The email address of the user.
     */
    resetPasswordForEmail(email) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield fetch_1.post(`${this.url}/recover`, { email }, { headers: this.headers });
                return { data, error: null };
            }
            catch (error) {
                return { data: null, error };
            }
        });
    }
    /**
     * Removes a logged-in session.
     * @param jwt A valid, logged-in JWT.
     */
    signOut(jwt) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let headers = Object.assign({}, this.headers);
                headers['Authorization'] = `Bearer ${jwt}`;
                yield fetch_1.post(`${this.url}/logout`, {}, { headers, noResolveJson: true });
                return { error: null };
            }
            catch (error) {
                return { error };
            }
        });
    }
    /**
     * Generates the relevant login URL for a third-party provider.
     * @param provider One of the providers supported by GoTrue.
     */
    getUrlForProvider(provider) {
        return `${this.url}/authorize?provider=${provider}`;
    }
    /**
     * Gets the user details.
     * @param jwt A valid, logged-in JWT.
     */
    getUser(jwt) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let headers = Object.assign({}, this.headers);
                headers['Authorization'] = `Bearer ${jwt}`;
                let data = yield fetch_1.get(`${this.url}/user`, { headers });
                return { data, error: null };
            }
            catch (error) {
                return { data: null, error };
            }
        });
    }
    /**
     * Updates the user data.
     * @param jwt A valid, logged-in JWT.
     * @param attributes The data you want to update.
     */
    updateUser(jwt, attributes) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let headers = Object.assign({}, this.headers);
                headers['Authorization'] = `Bearer ${jwt}`;
                let data = yield fetch_1.put(`${this.url}/user`, attributes, { headers });
                return { data, error: null };
            }
            catch (error) {
                return { data: null, error };
            }
        });
    }
    /**
     * Generates a new JWT.
     * @param refreshToken A valid refresh token that was returned on login.
     */
    refreshAccessToken(refreshToken) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let data = yield fetch_1.post(`${this.url}/token?grant_type=refresh_token`, { refresh_token: refreshToken }, { headers: this.headers });
                return { data, error: null };
            }
            catch (error) {
                return { data: null, error };
            }
        });
    }
}
exports.default = GoTrueApi;
//# sourceMappingURL=GoTrueApi.js.map